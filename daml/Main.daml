module Main where

import DA.Text

type AnswerId = ContractId Answer

template Question
    with
        asker : Party
        public : Party -- | It's the intention that everyone can act as this party (so that questions are publicly viewable)
        id : Int -- | Must be unique for all questions by the same 'asker'
        title : Text
        body : Text
        answer : Optional AnswerId -- | 'None' if unanswered, 'Some' if answered
    where
        signatory asker
        observer public

        key (asker, id) : (Party, Int)
        maintainer key._1

        choice AcceptAnswer : ContractId Question
            with
                answerId : AnswerId
            controller asker
            do
                -- Check that the answer is an answer to this question
                answer <- fetch @Answer answerId
                let thisKey = (this.asker, this.id)
                    expectationText = unwords
                        [ "Expected:", show thisKey <> ","
                        , "actual:", show answer.questionKey <> "."
                        ]
                assertMsg (unwords ["Cannot accept an answer to a different question.", expectationText]) $
                    answer.questionKey == thisKey
                create this with
                    answer = Some answerId

template Answer
    with
        answerer : Party
        public : Party -- | It's the intention that everyone can act as this party (so that answers are publicly viewable)
        questionKey : (Party, Int) -- | Which question is this an answer to?
        body : Text -- | The actual answer
    where
        signatory answerer
        observer public, questionKey._1 -- The asker of the question must also be an observer in order to check that the answer points to their question when accepting it

        choice ProposeAnswer : AnswerId
            controller answerer
            do
                create this
